# ZeroPlex Configuration

# Top-level config uses nested keys for all options.
# See README for full documentation.

default:
  mode: "auto"
  log:
    level: "info"
    type: "console"         # Options: console, file, both
    file: "/var/log/zeroplex.log"
    timestamps: false
  daemon:
    enabled: true           # Default to daemon mode
    poll_interval: "1m"
  client:
    host: "http://localhost"
    port: 9993
    token_file: "/var/lib/zerotier-one/authtoken.secret"
  features:
    dns_over_tls: false
    add_reverse_domains: false
    multicast_dns: false
    restore_on_exit: false
  interface_watch:
    mode: "event"         # Options: event, poll, off
    retry:
      count: 3            # Number of retries after interface event
      delay: "2s"         # Delay between retries (duration string)
  networkd:
    auto_restart: true
    reconcile: true

profiles:
  # Development profile with debug logging and daemon mode
  development:
    log:
      level: "debug"
      timestamps: true
    daemon:
      enabled: true
      poll_interval: "30s"
    interface_watch:
      mode: "event"
      retry:
        count: 3
        delay: "2s"
    features:
      restore_on_exit: false
    filters:
      - type: "interface"
        conditions:
          - value: "zt12345678"
            logic: "or"
          - value: "zt87654321"
            logic: "or"

  # Production profile with specific networks
  production:
    mode: "networkd"
    log:
      level: "info"
    daemon:
      enabled: true
      poll_interval: "5m"
    networkd:
      auto_restart: true
      reconcile: true
    interface_watch:
      mode: "poll"
      retry:
        count: 2
        delay: "1s"
    features:
      restore_on_exit: false
    filters:
      - type: "network"
        conditions:
          - value: "prod_network"
            logic: "or"
          - value: "mgmt_network"
            logic: "or"
      - type: "network"
        operation: "AND"
        negate: true
        conditions:
          - value: "test_network"

  # Resolved mode for desktop systems
  desktop:
    mode: "resolved"
    log:
      level: "info"
    features:
      add_reverse_domains: true
      restore_on_exit: false
    filters:
      - type: "network_id"
        conditions:
          - value: "a1b2c3d4e5f6g7h8"
            logic: "or"
          - value: "h8g7f6e5d4c3b2a1"
            logic: "or"

  # Simple daemon mode
  daemon_simple:
    daemon:
      enabled: true
      poll_interval: "2m"
    log:
      level: "info"
    features:
      restore_on_exit: false

  # Advanced filtering examples
  advanced_filtering:
    mode: "networkd"
    log:
      level: "debug"
    features:
      restore_on_exit: false
    filters:
      # Filter 1: Include only online networks with specific names
      - type: "name"
        operation: "AND"
        conditions:
          - value: "prod*"
            logic: "or"
          - value: "mgmt*"
            logic: "or"
      # Filter 2: AND with online status check
      - type: "online"
        operation: "AND"
        conditions:
          - value: "true"
      # Filter 3: Exclude test networks
      - type: "name"
        operation: "AND"
        negate: true
        conditions:
          - value: "*test*"

  # Network filtering with address requirements
  address_filtering:
    mode: "resolved"
    log:
      level: "info"
    features:
      restore_on_exit: false
    filters:
      # Only networks with assigned addresses
      - type: "assigned"
        conditions:
          - value: "true"
      # AND specific address ranges
      - type: "address"
        operation: "AND"
        conditions:
          - value: "10.*"
            logic: "or"
          - value: "192.168.*"

  # Interface-based advanced filtering
  interface_advanced:
    mode: "networkd"
    features:
      restore_on_exit: false
    filters:
      # Include specific interfaces
      - type: "interface"
        conditions:
          - value: "zt*"
      # AND exclude specific ones
      - type: "interface"
        operation: "AND"
        negate: true
        conditions:
          - value: "*test*"

  # Route-based filtering
  route_filtering:
    mode: "networkd"
    features:
      restore_on_exit: false
    filters:
      # Networks with specific routes
      - type: "route"
        conditions:
          - value: "0.0.0.0/0"
            logic: "or"
          - value: "10.0.0.0/8"
            logic: "or"

  # One-shot mode for manual execution
  oneshot:
    daemon_mode: false  # Explicitly disable daemon mode (legacy, see README)
    log_level: "info"   # Legacy, see README
    restore_on_exit: false # Legacy, see README